{
  "compilerOptions": {
    "target": "ES2020", // 设置 ECMAScript 的目标版本为 ES2020
    "useDefineForClassFields": true, // 使用 JavaScript 的定义类字段语法
    "module": "ESNext", // 生成使用 ES 模块语法的代码
    "lib": ["ES2020", "DOM", "DOM.Iterable"], // 包含的库文件，ES2020 规范和 DOM 类型定义
    "skipLibCheck": true, // 跳过库文件的类型检查，提高编译速度

    /* Bundler mode */
    "moduleResolution": "node", // 使用打包器模式来解析模块
    "allowImportingTsExtensions": true, // 允许导入带有 .ts 扩展名的文件
    "resolveJsonModule": true, // 允许从 .json 文件中导入模块
    "isolatedModules": true, // 每个文件作为单独的模块进行处理
    "noEmit": false, // 不生成编译后的文件，仅用于类型检查
    "jsx": "preserve", // 保留 JSX 语法，而不是将其转换为 JavaScript

    // /* Linting */
    "strict": false, // 启用所有的严格类型检查选项
    "noUnusedLocals": false, // 检查并报告未使用的本地变量
    "noUnusedParameters": false, // 检查并报告未使用的函数参数
    "noFallthroughCasesInSwitch": false, // 检查并报告 switch 语句中的 fallthrough 情况
    "declaration": true,
    "outDir": "./dist", // 指定声明文件输出目录
    "baseUrl": ".", // 设置基础目录，用于解析非相对模块的导入
    "paths": {
      "@/*": ["src/*"] // 配置路径别名，用于导入 @ 符号开头的模块
    }
  },

  "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx", "src/**/*.vue"], // 包含的文件和目录模式
  "references": [{ "path": "./tsconfig.node.json" }] // 引用其他的 tsconfig 文件，用于项目的多配置
}
